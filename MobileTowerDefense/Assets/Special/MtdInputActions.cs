//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Special/MtdInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MtdInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MtdInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MtdInputActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""71a7b0e1-8310-4bd0-a2f5-20c7432745de"",
            ""actions"": [
                {
                    ""name"": ""Touch0Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""444e8ae9-cf36-4a56-8124-fbb6c8df5854"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2920512d-6de4-42a0-9350-3152e8b3b5a6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Press"",
                    ""type"": ""Button"",
                    ""id"": ""aab6272b-3b4c-482f-9110-7839105e6482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""ac3f1e2a-f72d-47c4-a3ab-9f44bdbc193c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScrollZoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d4a21d6c-fc94-4a74-99b3-dc8dda5dd5af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragPress"",
                    ""type"": ""Button"",
                    ""id"": ""90c88446-4452-42f9-b8e7-4e254d66dd46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a729e45-5db8-49ba-82a6-f931ce423270"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touch1Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""520910ca-9273-4ed2-abc3-aea55e3a53bf"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""DragPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b34b383-d491-465f-b8b1-0871678145c3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""DragPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28fb8ab4-c6ab-46d1-8e41-d20536fe0b6b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseScrollZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c2a644-3ebc-4dae-a106-589b7ca75b59"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""077bec86-3cd7-4185-b22a-21af5b99cba8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a8394ec-5479-420b-aade-d09199e7a00f"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5693e57a-238a-46ed-b5ae-e64e6e574302"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e074f73-7497-4855-beb9-f70e9a303335"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Touch0Position = m_Main.FindAction("Touch0Position", throwIfNotFound: true);
        m_Main_Touch1Position = m_Main.FindAction("Touch1Position", throwIfNotFound: true);
        m_Main_Touch1Press = m_Main.FindAction("Touch1Press", throwIfNotFound: true);
        m_Main_Tap = m_Main.FindAction("Tap", throwIfNotFound: true);
        m_Main_MouseScrollZoom = m_Main.FindAction("MouseScrollZoom", throwIfNotFound: true);
        m_Main_DragPress = m_Main.FindAction("DragPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Touch0Position;
    private readonly InputAction m_Main_Touch1Position;
    private readonly InputAction m_Main_Touch1Press;
    private readonly InputAction m_Main_Tap;
    private readonly InputAction m_Main_MouseScrollZoom;
    private readonly InputAction m_Main_DragPress;
    public struct MainActions
    {
        private @MtdInputActions m_Wrapper;
        public MainActions(@MtdInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch0Position => m_Wrapper.m_Main_Touch0Position;
        public InputAction @Touch1Position => m_Wrapper.m_Main_Touch1Position;
        public InputAction @Touch1Press => m_Wrapper.m_Main_Touch1Press;
        public InputAction @Tap => m_Wrapper.m_Main_Tap;
        public InputAction @MouseScrollZoom => m_Wrapper.m_Main_MouseScrollZoom;
        public InputAction @DragPress => m_Wrapper.m_Main_DragPress;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Touch0Position.started -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch0Position;
                @Touch0Position.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch0Position;
                @Touch0Position.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch0Position;
                @Touch1Position.started -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Position;
                @Touch1Position.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Position;
                @Touch1Position.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Position;
                @Touch1Press.started -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Press;
                @Touch1Press.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Press;
                @Touch1Press.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnTouch1Press;
                @Tap.started -= m_Wrapper.m_MainActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnTap;
                @MouseScrollZoom.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMouseScrollZoom;
                @MouseScrollZoom.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMouseScrollZoom;
                @MouseScrollZoom.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMouseScrollZoom;
                @DragPress.started -= m_Wrapper.m_MainActionsCallbackInterface.OnDragPress;
                @DragPress.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnDragPress;
                @DragPress.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnDragPress;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch0Position.started += instance.OnTouch0Position;
                @Touch0Position.performed += instance.OnTouch0Position;
                @Touch0Position.canceled += instance.OnTouch0Position;
                @Touch1Position.started += instance.OnTouch1Position;
                @Touch1Position.performed += instance.OnTouch1Position;
                @Touch1Position.canceled += instance.OnTouch1Position;
                @Touch1Press.started += instance.OnTouch1Press;
                @Touch1Press.performed += instance.OnTouch1Press;
                @Touch1Press.canceled += instance.OnTouch1Press;
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @MouseScrollZoom.started += instance.OnMouseScrollZoom;
                @MouseScrollZoom.performed += instance.OnMouseScrollZoom;
                @MouseScrollZoom.canceled += instance.OnMouseScrollZoom;
                @DragPress.started += instance.OnDragPress;
                @DragPress.performed += instance.OnDragPress;
                @DragPress.canceled += instance.OnDragPress;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnTouch0Position(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch1Press(InputAction.CallbackContext context);
        void OnTap(InputAction.CallbackContext context);
        void OnMouseScrollZoom(InputAction.CallbackContext context);
        void OnDragPress(InputAction.CallbackContext context);
    }
}
